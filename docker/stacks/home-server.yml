version: "3.8"

services:
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: oauth2-proxy
    restart: unless-stopped
    environment:
      OAUTH2_PROXY_PROVIDER: google
      OAUTH2_PROXY_REVERSE_PROXY: true
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_EMAIL_DOMAINS: ${OAUTH2_PROXY_EMAIL_DOMAINS}
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_UPSTREAMS: "static://200"
      OAUTH2_PROXY_SET_BASIC_AUTH: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_PROXY_PREFIX: "/oauth2"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_REDIRECT_URL: https://auth.rossreicks.com/oauth2/callback
      OAUTH2_PROXY_COOKIE_DOMAINS: .rossreicks.com
      OAUTH2_PROXY_BASIC_AUTH_PASSWORD: ${OAUTH2_PROXY_BASIC_AUTH_PASSWORD}
      OAUTH2_PROXY_COOKIE_SECURE: "false" # ssl is handled by caddy
    ports:
      - "4180:4180"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    environment:
      TZ: America/Chicago
      FTLCONF_webserver_api_password: ${PIHOLE_WEBPASSWORD}
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: 'all'
    volumes:
      - ${CONFIG_PATH}/pihole/etc-pihole:/etc/pihole
      - ${CONFIG_PATH}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8080:80"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN

  # cloudflare-ddns:
  #   container_name: cloudflare-ddns
  #   image: favonia/cloudflare-ddns:latest
  #   environment:
  #     - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
  #     - DOMAINS=home.rossreicks.com
  #     - PROXIED=false
  #   restart: unless-stopped

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 86400
    restart: unless-stopped

  # backup ui
  backrest:
      image: garethgeorge/backrest:latest
      container_name: backrest
      volumes:
        - ${CONFIG_PATH}:/hostconfig
        - ${CONFIG_PATH}/backrest/data:/data
        - ${CONFIG_PATH}/backrest/config:/config
        - ${CONFIG_PATH}/backrest/cache:/cache
        - ${NAS_PATH}/backups/repos:/repos
      environment:
        - BACKREST_DATA=/data # path for backrest data. restic binary and the database are placed here.
        - BACKREST_CONFIG=/config/config.json # path for the backrest config file.
        - XDG_CACHE_HOME=/cache # path for the restic cache which greatly improves performance.
        - TZ=America/Chicago # set the timezone for the container, used as the timezone for cron jobs.
      restart: unless-stopped
      ports:
        - 9898:9898

  lunalytics:
      image: ksjaay/lunalytics:latest
      container_name: lunalytics
      ports:
        - 2308:2308
      volumes:
        - ${CONFIG_PATH}/lunalytics:/app/data
        - ${CONFIG_PATH}/lunalytics/logs:/app/logs
      restart: unless-stopped

  postgres:
    image: 'postgres:17'
    container_name: postgres
    restart: unless-stopped
    environment:
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
    volumes:
      - ${CONFIG_PATH}/postgres:/var/lib/postgresql/data
    networks:
      - internal

  redis:
    image: 'redis:7'
    container_name: redis
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH}/redis:/data
    networks:
      - internal

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    hostname: home-server
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ${FILE_PATH}/alloy:/etc/alloy
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /run:/run:ro
      - /var/log:/var/log:ro
      - /run/udev/data:/run/udev/data:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - run
      - /etc/alloy/config.alloy
    environment:
      - PROMETHEUS_USERNAME=${PROMETHEUS_USERNAME}
      - PROMETHEUS_PASSWORD=${PROMETHEUS_PASSWORD}
      - LOKI_USERNAME=${LOKI_USERNAME}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
    depends_on:
      - prometheus
      - loki
    networks:
      - internal

  bytestash:
    image: "ghcr.io/jordan-dalby/bytestash:latest"
    container_name: bytestash
    restart: always
    # volumes:
    #   - ${NAS_PATH}/bytestash:/data/snippets
    ports:
      - "5000:5000"
    environment:
        - ALLOW_NEW_ACCOUNTS=false
        - DEBUG=true
        - OIDC_ENABLED=true
        - OIDC_DISPLAY_NAME=Google
        - OIDC_ISSUER_URL=https://accounts.google.com/.well-known/openid-configuration
        - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
        - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
        - OIDC_SCOPES=openid email profile

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: "1000:1000"  # Run as user 1000 to match host user
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    volumes:
      - ${CONFIG_PATH}/prometheus:/etc/prometheus
      - ${CONFIG_PATH}/prometheus/data:/prometheus
    networks:
      - internal

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - ${CONFIG_PATH}/grafana:/var/lib/grafana
    networks:
      - internal

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    user: "1000:1000"
    ports:
      - "3100:3100"
    volumes:
      - ${CONFIG_PATH}/loki:/etc/loki
      - ${CONFIG_PATH}/loki/data:/loki
    networks:
      - internal

networks:
  internal:
