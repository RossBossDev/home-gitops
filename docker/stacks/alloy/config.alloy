// =============================================================================
// GRAFANA ALLOY CONFIGURATION - STEP 1: BASIC SETUP (SIMPLIFIED)
// =============================================================================
// This is the most minimal Alloy configuration to test basic functionality.
// Since system volumes are commented out, we'll start with a simple test.

// =============================================================================
// LOGGING CONFIGURATION
// =============================================================================
// This block configures how Alloy itself logs information.
// - level: Controls verbosity (debug, info, warn, error)
// - format: How log messages are formatted (logfmt is key=value pairs)
logging {
  level  = "info"          // Show informational messages and above
  format = "logfmt"        // Use structured logging format
}

// =============================================================================
// STEP 1: INTERNAL ALLOY METRICS
// =============================================================================
// Since we don't have system access yet, let's start by monitoring Alloy itself.
// This will help us verify the basic setup is working.

// First, let's create a simple scrape job that monitors Alloy's own metrics
prometheus.scrape "alloy_internal" {
  // Monitor Alloy's own metrics endpoint
  targets = [
    {"__address__" = "localhost:12345"},
  ]
  
  // Collect metrics every 15 seconds
  scrape_interval = "15s"
  
  // The path where Alloy exposes its own metrics
  metrics_path = "/metrics"
  
  // Send the collected metrics to our labeling step
  forward_to = [prometheus.relabel.add_labels.receiver]
}

// =============================================================================
// STEP 1: ADD HELPFUL LABELS TO METRICS
// =============================================================================
// This block adds extra information to every metric to make them easier to find
// and understand in Grafana. Labels are like tags that help organize data.

prometheus.relabel "add_labels" {
  // Send processed metrics to our output destination
  forward_to = [prometheus.remote_write.grafana_local.receiver]

  // Add a consistent instance label to all metrics
  // This helps when you have multiple servers - you'll see "home-server" in Grafana
  rule {
    source_labels = ["__address__"]     // Take the original address
    target_label  = "instance"         // Create a new label called "instance" 
    replacement   = "home-server"       // Set it to our server name
  }
  
  // Add a job label to identify what type of monitoring this is
  rule {
    target_label = "job"               // Create a "job" label
    replacement  = "alloy-internal"    // Set it to "alloy-internal" for Alloy's own metrics
  }
}

// =============================================================================
// STEP 1: SEND METRICS TO GRAFANA
// =============================================================================
// This sends metrics to your local Grafana instance so you can see them in dashboards.
// We're using Grafana's built-in Prometheus-compatible endpoint.

prometheus.remote_write "grafana_local" {
  endpoint {
    // Send to Grafana's built-in Prometheus endpoint
    // This allows Grafana to receive metrics directly
    url = "http://grafana:3000/api/prom/push"
    
    // Basic authentication (you may need to adjust this)
    basic_auth {
      username = "admin"
      password = env("GRAFANA_ADMIN_PASSWORD")
    }
    
    // Configure how to handle failed sends (retry settings)
    queue_config {
      max_samples_per_send = 1000      // Send up to 1000 metrics at once
      capacity = 10000                 // Buffer up to 10000 metrics
      batch_send_deadline = "5s"       // Send batches every 5 seconds
    }
  }
}

// =============================================================================
// WHAT TO EXPECT:
// =============================================================================
// After deploying this configuration, you should see:
// 
// 1. **Alloy UI** (http://home-server:12345):
//    - Go to "Targets" tab - you should see "alloy_internal" target as UP
//    - Go to "Service Discovery" - you should see the localhost:12345 target
//    - Go to "Configuration" - you should see this parsed configuration
//
// 2. **Alloy Metrics Available**:
//    - alloy_build_info (information about Alloy version)
//    - alloy_component_controller_running_components (how many components are active)
//    - prometheus_scrape_duration_seconds (how long scrapes take)
//    - prometheus_scrape_samples_scraped (how many metrics were collected)
//    - go_memstats_* (Go runtime memory statistics)
//    - process_* (Process-level statistics like CPU time, memory usage)
//
// 3. **In Grafana** (https://grafana.rossreicks.com):
//    - You should be able to query for alloy_* metrics
//    - Try queries like: alloy_build_info, prometheus_scrape_duration_seconds
//    - Create a simple dashboard showing Alloy's health
//
// 4. **Container Logs**:
//    - Run: docker logs alloy
//    - You should see log lines about successful configuration loading
//    - You should see periodic scrape success messages
//
// =============================================================================
// NEXT STEPS:
// =============================================================================
// Once this is working, we can add:
// - Step 2: Uncomment system volumes and add real system metrics
// - Step 3: Add Docker container monitoring  
// - Step 4: Add service discovery for your other containers
// - Step 5: Add custom application metrics
//
// But for now, let's make sure this basic setup works and you can see
// Alloy's own metrics in Grafana!