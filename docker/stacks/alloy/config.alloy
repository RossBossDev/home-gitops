// Logging with Loki
// local.file_match "local_files" {
//      path_targets = [{"__path__" = "/var/log/*.log"}]
//      sync_period = "5s"
// }

// loki.source.file "log_scrape" {
//     targets    = local.file_match.local_files.targets
//     forward_to = [loki.process.filter_logs.receiver]
//     tail_from_end = true
// }

// // this is an example of how you would filter out noisy logs
// loki.process "filter_logs" {
//     stage.drop {
//         source = ""
//         expression  = ".*Connection closed by authenticating user root"
//         drop_counter_reason = "noisy"
//       }
//     forward_to = [loki.write.grafana_loki.receiver]
// }

// loki.write "grafana_loki" {
//     endpoint {
//         url = "http://localhost:3100/loki/api/v1/push"
//     }
// }

// Metrics recording with Prometheus
prometheus.exporter.unix "integrations_node_exporter" {
    disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
    enable_collectors = ["meminfo"]

    filesystem {
      fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
      mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
      mount_timeout        = "5s"
    }

    netclass {
      ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
    }

    netdev {
      device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
    }
}

discovery.relabel "integrations_node_exporter" {
    targets = prometheus.exporter.unix.integrations_node_exporter.targets

    rule {
      target_label = "instance"
      replacement  = constants.hostname
    }

    rule {
      target_label = "job"
      replacement = "integrations/node_exporter"
    }
}

prometheus.scrape "integrations_node_exporter" {
    scrape_interval = "15s"
    targets    = discovery.relabel.integrations_node_exporter.output
    forward_to = [prometheus.remote_write.metrics_hosted_prometheus.receiver]
}

prometheus.exporter.cadvisor "container_metrics" {
    docker_host = "unix:///var/run/docker.sock"
    storage_duration = "5m"
}

prometheus.scrape "scrape_metrics" {
  targets = prometheus.exporter.cadvisor.container_metrics.targets
  forward_to = [prometheus.remote_write.metrics_hosted_prometheus.receiver]
  scrape_interval = "10s"
}

prometheus.remote_write "metrics_hosted_prometheus" {
   endpoint {
      name = "hosted-prometheus"
      url  = "https://prometheus-prod-56-prod-us-east-2.grafana.net/api/prom/push"

      basic_auth {
        username = sys.env("GRAFANA_USERNAME")
        password = sys.env("GRAFANA_PASSWORD")
      }
   }
}
